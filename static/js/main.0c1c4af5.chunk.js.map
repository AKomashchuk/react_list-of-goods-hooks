{"version":3,"sources":["App.tsx","index.tsx"],"names":["goodsFromServer","App","useState","goods","setGoods","showList","setShowList","className","value","label","map","type","onClick","sort","good1","good2","length","reverse","isChange","good","ReactDOM","render","document","getElementById"],"mappings":"iOAIMA,EAA4B,CAChC,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAUWC,EAAgB,WAC3B,MAA0BC,mBAASF,GAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAgCF,oBAAS,GAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KAoDA,OACE,sBAAKC,UAAU,MAAf,UAxBwB,CACxB,CACEC,MAAO,QACPC,MAAO,SAET,CACED,MAAO,aACPC,MAAO,uBAET,CACED,MAAO,eACPC,MAAO,kBAET,CACED,MAAO,UACPC,MAAO,WAET,CACED,MAAO,QACPC,MAAO,UAMEC,KAAI,gBAAGF,EAAH,EAAGA,MAAOC,EAAV,EAAUA,MAAV,QACTJ,GAAsB,UAAVG,IACZ,wBACEG,KAAK,SAELJ,UAAU,SACVK,QAAS,kBA1DF,SAACJ,GAChB,OAAQA,GACN,IAAK,aACHJ,EAAS,YAAID,GAAOU,QACpB,MAEF,IAAK,eACHT,EAAS,YAAID,GACVU,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAME,OAASD,EAAMC,WAC/C,MAEF,IAAK,UACHZ,EAAS,YAAID,GAAOc,WACpB,MAEF,IAAK,QACHX,GAAaD,GACb,MAEF,IAAK,QACHD,EAASJ,IAsCUkB,CAASV,IAJ1B,SAMGC,GAJIA,MASX,oBAAIF,UAAU,QAAd,SACGF,GAECF,EAAMO,KAAI,SAAAS,GAAI,OACZ,oBAAIZ,UAAU,cAAd,SACGY,GAD8BA,YC9F7CC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.0c1c4af5.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.scss';\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst goodsFromServer: string[] = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\ntype GoodsType = 'sortByAlph' | 'sortByLength' | 'reverse' | 'start' | 'reset';\n\ninterface Button {\n  value: GoodsType;\n  label: string\n}\n\nexport const App: React.FC = () => {\n  const [goods, setGoods] = useState(goodsFromServer);\n  const [showList, setShowList] = useState(false);\n\n  const isChange = (value: GoodsType) => {\n    switch (value) {\n      case 'sortByAlph':\n        setGoods([...goods].sort());\n        break;\n\n      case 'sortByLength':\n        setGoods([...goods]\n          .sort((good1, good2) => good1.length - good2.length));\n        break;\n\n      case 'reverse':\n        setGoods([...goods].reverse());\n        break;\n\n      case 'start':\n        setShowList(!showList);\n        break;\n\n      case 'reset':\n        setGoods(goodsFromServer);\n        break;\n\n      default:\n    }\n  };\n\n  const BUTTONS: Button[] = [\n    {\n      value: 'start',\n      label: 'Start',\n    },\n    {\n      value: 'sortByAlph',\n      label: 'Sort alphabetically',\n    },\n    {\n      value: 'sortByLength',\n      label: 'Sort by length',\n    },\n    {\n      value: 'reverse',\n      label: 'Reverse',\n    },\n    {\n      value: 'reset',\n      label: 'Reset',\n    },\n  ];\n\n  return (\n    <div className=\"App\">\n      {BUTTONS.map(({ value, label }) => (\n        (!showList || value !== 'start') && (\n          <button\n            type=\"button\"\n            key={label}\n            className=\"button\"\n            onClick={() => isChange(value)}\n          >\n            {label}\n          </button>\n        )\n      ))}\n\n      <ul className=\"Goods\">\n        {showList\n        && (\n          goods.map(good => (\n            <li className=\"Goods__item\" key={good}>\n              {good}\n            </li>\n          ))\n        )}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}